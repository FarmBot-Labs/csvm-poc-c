/**

This File was autogenerated based off CeleryScript corpus: <%= tag %>

It Should not be modified directly. It should be generated by running
    mix corpus /path/to/corpus.json

This file has two usable functions:

    celery_node_kind_name_t node_name_from_string(char *key)
      Lookup a node name by its string value.

    celery_arg_kind_name_t arg_name_from_string(char *key)
      Lookup a arg name by its string value.

*/


#include "corpus.h"
#include <string.h>

/** Lookup table for the `node_name_from_string()` function. */
static celery_kv_sym_t node_name_lookup_table[] = {
  <%=
    Enum.map(node_names, fn(%{upcase_name: upcase, name: name}) ->
      "{\"#{name}\", #{upcase}}"
    end)
    |> Enum.join(",\r\n\t")
  %>
};

/** Lookup table for the `arg_name_from_string()` function. */
static celery_kv_sym_t arg_name_lookup_table[] = {
  <%=
    Enum.map(arg_names, fn(%{upcase_name: upcase, name: name}) ->
      "{\"#{name}\", #{upcase}}"
    end)
    |> Enum.join(",\r\n\t")
  %>
};

/** Looks up a Node name by it's string value */
celery_node_kind_name_t node_name_from_string(char *key) {
    for (int i=0; i < NUMBER_NODE_NAMES; i++) {
        celery_kv_sym_t *sym = node_name_lookup_table + i;
        if (strcmp(sym->key, key) == 0)
            return sym->val;
    }
    return BADKEY;
}

char* string_from_node_name(celery_node_kind_name_t name) {
    for (int i=0; i < NUMBER_NODE_NAMES; i++) {
        celery_kv_sym_t *sym = node_name_lookup_table + i;
        if(sym->val == name)
            return sym->key;
    }
    return NULL;
}

/** Looks up a Arg name by it's string value */
celery_arg_kind_name_t arg_name_from_string(char *key) {
    for (int i=0; i < NUMBER_ARG_NAMES; i++) {
        celery_kv_sym_t *sym = arg_name_lookup_table + i;
        if (strcmp(sym->key, key) == 0)
            return sym->val;
    }
    return BADKEY;
}

char* string_from_arg_name(celery_arg_kind_name_t name) {
    for (int i=0; i < NUMBER_ARG_NAMES; i++) {
        celery_kv_sym_t *sym = arg_name_lookup_table + i;
        if(sym->val == name)
            return sym->key;
    }
    return NULL;
}
