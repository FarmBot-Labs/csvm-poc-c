/**

This File was autogenerated based off CeleryScript corpus: <%= tag %>

It Should not be modified directly. It should be generated by running
    mix corpus /path/to/corpus.json

This file has two usable functions:

    celery_node_kind_name_t node_name_from_string(char *key)
      Lookup a node name by its string value.

    celery_arg_kind_name_t arg_name_from_string(char *key)
      Lookup a arg name by its string value.

*/

#ifndef CORPUS_H
#define CORPUS_H

#define NUMBER_NODE_NAMES (<%= Enum.count(node_names) %>)
#define NUMBER_ARG_NAMES (<%= Enum.count(arg_names) %>)
#define BADKEY -1

#include <string.h>

/** Symbol of key => value */
typedef struct {
  char *key;
  int val;
} celery_kv_sym_t;

/* Begin Celery Node definition */
typedef enum CeleryNodeKind {
  <%=
    Enum.map(node_names, fn(%{upcase_name: name}) ->
      name
    end) |> Enum.join(",\r\n\t")
  %>
} celery_node_kind_name_t;

/** Lookup table for the `node_name_from_string()` function. */
static celery_kv_sym_t node_name_lookup_table[] = {
  <%=
    Enum.map(node_names, fn(%{upcase_name: upcase, name: name}) ->
      "{\"#{name}\", #{upcase}}"
    end) |> Enum.join(",\r\n\t")
  %>
};

/** Looks up a Node name by it's string value */
celery_node_kind_name_t node_name_from_string(char *key) {
    for (int i=0; i < NUMBER_NODE_NAMES; i++) {
      celery_kv_sym_t *sym = node_name_lookup_table + i*sizeof(celery_kv_sym_t);
      if (strcmp(sym->key, key) == 0)
        return sym->val;
    }
    return BADKEY;
}

/* Begin Celery Arg definition */
typedef enum CeleryArgKind {
  <%=
    Enum.map(arg_names, fn(%{upcase_name: name}) ->
      name
    end) |> Enum.join(",\r\n\t")
  %>
} celery_arg_kind_name_t;

/** Lookup table for the `arg_name_from_string()` function. */
static celery_kv_sym_t arg_name_lookup_table[] = {
  <%=
    Enum.map(arg_names, fn(%{upcase_name: upcase, name: name}) ->
      "{\"#{name}\", #{upcase}}"
    end) |> Enum.join(",\r\n\t")
  %>
};

/** Looks up a Arg name by it's string value */
celery_arg_kind_name_t arg_name_from_string(char *key) {
    for (int i=0; i < NUMBER_NODE_NAMES; i++) {
      celery_kv_sym_t *sym = arg_name_lookup_table + i*sizeof(celery_kv_sym_t);
      if (strcmp(sym->key, key) == 0)
        return sym->val;
    }
    return BADKEY;
}

#endif
